name: Deploy on production server
on:
  push:
    branches: [master]
jobs:
  init:
    runs-on: [production]
    steps:
      - name: Check directory exist
        id: check-directory
        continue-on-error: true
        run: |
          cd ./prod/
          echo ::set-output name=exist::true
      - name: Update exist project
        if: steps.check-directory.outputs.exist == 'true'
        run: |
          cd ./prod/
          git checkout master
          git add .
          git reset --hard
          git fetch origin --tags
          git pull
      - name: Deploy new project
        if: steps.check-directory.outputs.exist != 'true'
        run: |
          git clone git@github.com:tchevalleraud/symfony-docker-project.git
          mv symfony-docker-project/ prod/
          cd ./prod/
          git checkout master
      - name: Update environment
        run: |
          cd ./prod/
          rm -f .env
          touch .env
          echo "APP_ENV=prod" >> .env
          echo "APP_NAME=\"Symfony Docker Project\"" >> .env
          echo "APP_SECRET=\"${{ secrets.APP_SECRET }}\"" >> .env
          echo "DATABASE_LOCAL_URL=\"sqlite:///%kernel.project_dir%/var/local.db\"" >> .env
          echo "DATABASE_MYSQL_URL=\"mysql://root:${{ secrets.DATABASE_MYSQL_PASSWORD }}@database:3306/symfony-docker-project\"" >> .env
          rm -f ./docker/.password
          echo "DATABASE_MYSQL_PASSWORD=${{ secrets.DATABASE_MYSQL_PASSWORD }}" >> ./docker/.password
  build:
    runs-on: [production]
    needs: [init]
    steps:
      - name: Build docker image
        run: |
          cd ./prod/
          make docker-build
      - name: Build dependancies
        run: |
          cd ./prod/
          make vendor/autoload.php
          make public/assets
      - name: Build Swagger documentation
        run: |
          cd ./prod/
          make swagger
      - name: Generate certificate
        run: |
          cd ./prod/
          openssl genrsa -out ./config/jwt/private_key.pem 4096
          openssl rsa -pubout -in config/jwt/private_key.pem -out config/jwt/public_key.pem
  deploy:
    runs-on: [production]
    needs: [build]
    steps:
      - name: Start docker environment
        run: |
          cd ./prod/
          make server-start
          sleep 60
          make server-restart
          sleep 60
      - name: Database deployment
        run: |
          cd ./prod/
          make doctrine-database-create
          make app/system/init
      - name: Cache clear
        run: |
          cd ./prod/
          make cache-clear
  codacy:
    runs-on: [development]
    needs: [deploy]
    steps:
      - name: Remove previous report
        run: |
          cd ./dev/
          rm -Rf coverage.xml
      - name: UnitTest
        run: |
          cd ./dev/
          make test-codecoverage
      - name: Upload report
        run: |
          cd ./dev/
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml --project-token ${{ secrets.CODACY_PROJECT_TOKEN }}
  codecov:
    runs-on: [development]
    needs: [deploy]
    steps:
      - name: Remove previous report
        run: |
          cd ./dev/
          rm -Rf coverage.xml
      - name: UnitTest
        run: |
          cd ./dev/
          make test-codecoverage
      - name: Upload report
        run: |
          cd ./dev/
          CODECOV_TOKEN=${{ secrets.CODECOV_TOKEN }} bash <(curl -s https://codecov.io/bash)